  #include <WiFi.h>
  #include <PubSubClient.h>
  #include <Wire.h>
  #include <LiquidCrystal_I2C.h>
  #include <Keypad.h>
  #include <SPI.h>
  #include <MFRC522.h>
  #include <ArduinoJson.h>
  #include "esp_heap_caps.h"
  #include "freertos/FreeRTOS.h"
  #include "freertos/task.h"

  #define RST_PIN 4
  #define SS_PIN 5
  #define ENCODER_PIN 34
  #define PULSES_PER_REV 20

  LiquidCrystal_I2C lcd(0x27, 20, 4);

  const byte ROWS = 4;
  const byte COLS = 3;
  char keys[ROWS][COLS] = {
    {'1','2','3'},
    {'4','5','6'},
    {'7','8','9'},
    {'*','0','#'}
  };
  byte rowPins[ROWS] = {12, 33, 25, 27};
  byte colPins[COLS] = {14, 13, 26};
  Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);
  
  const char* maquina_id = "MAQ01";
  const char* ssid = "SSID-REDE";
  const char* password = "SENHA-REDE";
  const char* mqtt_server = "IP-BROKER";
  const int mqtt_port = PORTA;
  const char* mqtt_topic = "esp32";

  WiFiClient espClient;
  PubSubClient client(espClient);
  MFRC522 rfid(SS_PIN, RST_PIN);

  String operador_id = "";
  String referencia = "";
  bool tempoTrabalho = false, tempoProducao = false;
  bool tempoBanheiro = false, tempoManutencao = false, tempoFaltaMaterial = false, tempoQuebraAgulha = false, tempoTrocaPeca = false;

  volatile unsigned long pulseCount = 0;
  unsigned long lastRPMCheck = 0;
  float rpm = 0;
  float cpuLoad = 0.0f;

  void IRAM_ATTR countPulse() {
    pulseCount++;
  }

  void resetarParadas() {
    tempoBanheiro = tempoManutencao = tempoFaltaMaterial = tempoQuebraAgulha = tempoTrocaPeca = false;
  }

  void verificarRFID() {
    if (!rfid.PICC_IsNewCardPresent() || !rfid.PICC_ReadCardSerial()) return;
    String uid = "";
    for (byte i = 0; i < rfid.uid.size; i++) {
      if (rfid.uid.uidByte[i] < 0x10) uid += "0";
      uid += String(rfid.uid.uidByte[i], HEX);
    }
    uid.toUpperCase();

    if (operador_id == "") {
      operador_id = uid;
      tempoTrabalho = true;
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Login: " + operador_id);
      lcd.setCursor(0, 1);
      lcd.print("Insira Referencia...");
    } else if (operador_id == uid) {
      operador_id = "";
      tempoTrabalho = tempoProducao = false;
      referencia = "";
      resetarParadas();
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Logout Realizado");
      lcd.setCursor(0, 1);
      lcd.print("Efetue o Login!");
    } else {
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Outro operador");
      lcd.setCursor(0, 1);
      lcd.print("ativo no momento!");
      delay(2000);
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Login: " + operador_id);
      lcd.setCursor(0, 1);
      lcd.print("REF: " + referencia);
    }

    rfid.PICC_HaltA();
    rfid.PCD_StopCrypto1();
    delay(1000);
  }

  void verificarTeclado() {
    if (operador_id == "") return;

    static String buffer = "";
    static bool asteriscoPressionado = false;

    char key = keypad.getKey();
    if (!key) return;

    if (key == '*') {
      asteriscoPressionado = true;
      buffer = "";  // limpa qualquer entrada anterior
      return;
    }

    if (key == '#') {
      if (asteriscoPressionado) {
        // Finaliza a referência
        referencia = "";
        tempoProducao = false;
        lcd.setCursor(0, 1);
        lcd.print("REF finalizada     ");
        delay(2000);
        lcd.setCursor(0, 1);
        lcd.print("Insira Referencia...");
        asteriscoPressionado = false;
        buffer = "";
        return;
      }

      int valor = buffer.toInt();
      if (valor >= 15) {
        if (referencia == "") {
          referencia = buffer;
          tempoProducao = true;
          lcd.setCursor(0, 1);
          lcd.print("                    ");
          lcd.setCursor(0, 1);
          lcd.print("REF: " + referencia);
        } else {
          lcd.setCursor(0, 1);
          lcd.print("REF ja ativa!      ");
          delay(2000);
          lcd.setCursor(0, 1);
          lcd.print("                    ");
          lcd.setCursor(0, 1);
          lcd.print("REF: " + referencia);
        }
      } else {
        bool* paradaAtual = nullptr;
        if (valor == 1) paradaAtual = &tempoBanheiro;
        else if (valor == 2) paradaAtual = &tempoManutencao;
        else if (valor == 3) paradaAtual = &tempoFaltaMaterial;
        else if (valor == 4) paradaAtual = &tempoQuebraAgulha;
        else if (valor == 5) paradaAtual = &tempoTrocaPeca;

        if (paradaAtual) {
          if (!(tempoBanheiro || tempoManutencao || tempoFaltaMaterial || tempoQuebraAgulha || tempoTrocaPeca)) {
            *paradaAtual = true;
            tempoProducao = false;  // Pausar produção quando iniciar qualquer parada
          } else if (*paradaAtual) {
            *paradaAtual = false;

            // Verifica se nenhuma outra parada está ativa
            if (!(tempoBanheiro || tempoManutencao || tempoFaltaMaterial || tempoQuebraAgulha || tempoTrocaPeca)) {
              tempoProducao = true;  // Retoma produção automaticamente
            }
          }
        }
      }

      buffer = "";
      asteriscoPressionado = false;
    } else {
      buffer += key;
    }
  }


  float getCPULoad() {
    static unsigned long lastIdle = 0, lastTotal = 0;
    unsigned long idle = ulTaskGetIdleRunTimeCounter();
    unsigned long total = portGET_RUN_TIME_COUNTER_VALUE();
    unsigned long idleDelta = idle - lastIdle;
    unsigned long totalDelta = total - lastTotal;
    lastIdle = idle;
    lastTotal = total;
    if (totalDelta == 0) return 0.0;
    return (1.0 - ((float)idleDelta / totalDelta)) * 100.0;
  }

  void enviarJSON() {
    StaticJsonDocument<512> doc;
    size_t totalHeap = heap_caps_get_total_size(MALLOC_CAP_DEFAULT);
    if (totalHeap == 0) totalHeap = 1;

    float heapPorcentagemUsada = ((totalHeap - esp_get_free_heap_size()) * 100.0) / totalHeap;

    doc["maquina_id"] = maquina_id;
    doc["operador"] = operador_id;
    doc["ref_op"] = referencia;
    doc["tempoTrabalho"] = tempoTrabalho;
    doc["tempoProducao"] = tempoProducao;
    doc["tempoBanheiro"] = tempoBanheiro;
    doc["tempoManutencao"] = tempoManutencao;
    doc["tempoFaltaMaterial"] = tempoFaltaMaterial;
    doc["tempoQuebraAgulha"] = tempoQuebraAgulha;
    doc["tempoTrocaPeca"] = tempoTrocaPeca;
    doc["rpm"] = roundf(rpm * 100) / 100.0;
    doc["cpuLoad"] = roundf(cpuLoad * 100) / 100.0;
    doc["heapLoad"] = roundf(heapPorcentagemUsada * 100) / 100.0;


    char jsonBuffer[512];
    size_t len = serializeJson(doc, jsonBuffer);

    Serial.println("JSON Gerado:");
    Serial.println(jsonBuffer);

    if (client.connected()) {
      if (client.publish(mqtt_topic, jsonBuffer)) {
        Serial.println("✅ JSON enviado com sucesso.");
      } else {
        Serial.println("❌ Falha ao enviar JSON.");
      }
    } else {
      Serial.println("⚠️ MQTT desconectado.");
    }
  }

 void mostrarParadaNoLCD() {
  // Linha 2 – Mensagem de parada (sempre limpa antes)
  lcd.setCursor(0, 2);
  lcd.print("                    ");  // limpa toda a linha
  lcd.setCursor(0, 2);
  if (tempoBanheiro) lcd.print("Parada: Banheiro");
  else if (tempoManutencao) lcd.print("Parada: Manutencao");
  else if (tempoFaltaMaterial) lcd.print("Parada: Falt. Mat.");
  else if (tempoQuebraAgulha) lcd.print("Parada: Q. Agulha ");
  else if (tempoTrocaPeca) lcd.print("Troca de Peca     ");

  // Linha 1 – Situação da produção ou referência
  lcd.setCursor(0, 1);
  lcd.print("                    ");  // limpa toda a linha
  lcd.setCursor(0, 1);
  if (tempoBanheiro || tempoManutencao || tempoFaltaMaterial || tempoQuebraAgulha || tempoTrocaPeca) {
    lcd.print("Producao Pausada!");
  } else if (referencia != "") {
    lcd.print("REF: " + referencia.substring(0, 16));  // evita ultrapassar limite
  } else {
    lcd.print("Insira Referencia");
  }
}


  void conectarWiFi() {
  lcd.setCursor(0, 0);
  lcd.print("Conectando WiFi...");
  lcd.setCursor(0, 1);
  lcd.print("                    ");
  
  WiFi.begin(ssid, password);
  int tentativas = 0;
  while (WiFi.status() != WL_CONNECTED && tentativas < 10) {
    delay(500);
    Serial.print(".");
    tentativas++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n✅ WiFi conectado!");
    Serial.println(WiFi.localIP());

    lcd.setCursor(0, 0);
    lcd.print("WiFi conectado     ");
    lcd.setCursor(0, 1);
    lcd.print(WiFi.localIP().toString().substring(0, 20));
    delay(2000);  // mostra IP por alguns segundos
    lcd.setCursor(0, 0);
    lcd.print("Sistema Iniciado   ");
    lcd.setCursor(0, 1);
    lcd.print("Efetue o Login!    ");
  } else {
    Serial.println("\n❌ Falha ao conectar WiFi.");
    lcd.setCursor(0, 0);
    lcd.print("Falha ao conectar  ");
    lcd.setCursor(0, 1);
    lcd.print("Rede WiFi.         ");
  }
}


  void conectarMQTT() {
  client.setServer(mqtt_server, mqtt_port);
  int tentativas = 0;

  lcd.setCursor(0, 0);
  lcd.print("Conectando MQTT... ");
  lcd.setCursor(0, 1);
  lcd.print("                    ");

  while (!client.connected() && tentativas < 5) {
    Serial.print("Tentando MQTT... ");
    if (client.connect(maquina_id)) {
      Serial.println("✅ Conectado ao MQTT!");
      lcd.setCursor(0, 0);
      lcd.print("MQTT conectado     ");
      delay(2000);  // mostra confirmação rápida
      lcd.setCursor(0, 0);
      lcd.print("Sistema Iniciado   ");
      lcd.setCursor(0, 1);
      lcd.print("Efetue o Login!    ");
      return;
    } else {
      Serial.print("❌ Falha (rc=");
      Serial.print(client.state());
      Serial.println("), nova tentativa...");
      delay(1000);
      tentativas++;
    }
  }

  // Falha após todas as tentativas
  Serial.println("❌ Erro: não conectou ao MQTT!");
  lcd.setCursor(0, 0);
  lcd.print("Falha ao conectar  ");
  lcd.setCursor(0, 1);
  lcd.print("ao Broker MQTT     ");
}


  void setup() {
    Serial.begin(115200);
    pinMode(ENCODER_PIN, INPUT_PULLUP);
    attachInterrupt(digitalPinToInterrupt(ENCODER_PIN), countPulse, RISING);

    Wire.begin(21, 22);
    lcd.init(); lcd.backlight();
    lcd.setCursor(0, 0); 
    lcd.print("Sistema Iniciado");
    lcd.setCursor(0, 1); 
    lcd.print("Efetue o Login!");

    SPI.begin();
    rfid.PCD_Init();
    conectarWiFi();
    conectarMQTT();
  }

  void loop() {
    static bool wifiTentado = false;
    if (WiFi.status() != WL_CONNECTED && !wifiTentado) {
      conectarWiFi();
      wifiTentado = true;  // não tenta mais depois de uma tentativa
    }
    static bool mqttTentado = false;
    if (!client.connected() && WiFi.status() == WL_CONNECTED && !mqttTentado) {
      conectarMQTT();
      mqttTentado = true;  // evita novas tentativas automáticas
    }
    client.loop();

    verificarRFID();
    verificarTeclado();
    mostrarParadaNoLCD();

    if (millis() - lastRPMCheck >= 1000) {
      detachInterrupt(digitalPinToInterrupt(ENCODER_PIN));
      rpm = (pulseCount * 60.0) / PULSES_PER_REV;
      pulseCount = 0;
      lastRPMCheck = millis();
      attachInterrupt(digitalPinToInterrupt(ENCODER_PIN), countPulse, RISING);
      cpuLoad = getCPULoad();
      lcd.setCursor(0, 3);
      lcd.printf("RPM: %.2f    ", rpm);
    }

    static unsigned long ultimaMensagem = 0;
    if (millis() - ultimaMensagem >= 5000) {
      enviarJSON();
      ultimaMensagem = millis();
    }

    vTaskDelay(pdMS_TO_TICKS(10));
  }
